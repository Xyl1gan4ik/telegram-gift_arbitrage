import nest_asyncio
nest_asyncio.apply()

import logging
import asyncio
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
import requests
import json
import curl_cffi # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º curl_cffi

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram –ë–æ—Ç–∞ ---
# –ó–ê–ú–ï–ù–ò–¢–ï –≠–¢–û: –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ Telegram –±–æ—Ç–∞, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç @BotFather
TELEGRAM_BOT_TOKEN = '7478514610:AAGxgAcectD6dLG0JBluiSAmBYoe99-FqgQ'
# –ó–ê–ú–ï–ù–ò–¢–ï –≠–¢–û: –í–∞—à ID —á–∞—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
# –ú–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É @userinfobot –∏ –ø–æ—Å–º–æ—Ç—Ä–µ–≤ 'id'.
TELEGRAM_USER_ID = 1291677325 

DEFAULT_INTERVAL = 30 # –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É–∫—Ü–∏–æ–Ω–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
DEFAULT_MIN_PROFIT = 5 # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–±—ã–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

# ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
logging.basicConfig(
    level=logging.INFO, 
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–æ—Ç–∞.
# –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (TELEGRAM_USER_ID).
user_settings = {
    TELEGRAM_USER_ID: {
        'min_profit': DEFAULT_MIN_PROFIT,
        'interval': DEFAULT_INTERVAL,
        'price_range': (5, 25), # –î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω –¥–ª—è —Å—Ç–∞–≤–æ–∫ (–æ—Ç, –¥–æ)
        'active': False, # –§–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        'notified_ids': set() # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ ID –ø–æ–¥–∞—Ä–∫–æ–≤, –æ –∫–æ—Ç–æ—Ä—ã—Ö —É–∂–µ –±—ã–ª–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–æ
    }
}

# –§—É–Ω–∫—Ü–∏—è escape_markdown_v2 —Ç–µ–ø–µ—Ä—å –Ω–µ –Ω—É–∂–Ω–∞ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π,
# –Ω–æ –æ—Å—Ç–∞–≤–∏–º –µ—ë –∑–∞–≥–ª—É—à–∫–æ–π, –µ—Å–ª–∏ –≥–¥–µ-—Ç–æ –µ—Å—Ç—å –≤—ã–∑–æ–≤—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥–ª–∏ –±—ã —Å–ª–æ–º–∞—Ç—å—Å—è.
# –ü–æ —Å—É—Ç–∏, –æ–Ω–∞ —Ç–µ–ø–µ—Ä—å –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.
def escape_markdown_v2(text):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, —Ç–∞–∫ –∫–∞–∫ MarkdownV2 —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ.
    """
    if text is None:
        return 'N/A'
    return str(text)

# üîë –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
# –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ—Ç —Ç–æ–∫–µ–Ω AUTH_DATA –∫—Ä–∞–π–Ω–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –≤—Ä–µ–º–µ–Ω–Ω—ã–π.
# –î–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –µ–≥–æ –Ω—É–∂–Ω–æ —Ä–µ–≥—É–ª—è—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å –∏–∑ —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ DevTools –±—Ä–∞—É–∑–µ—Ä–∞.
# –ò—â–∏—Ç–µ –∑–∞–ø—Ä–æ—Å, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π "authData" –≤ —Ç–µ–ª–µ –∏–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö.
AUTH_DATA = "user=%7B%22id%22%3A1291677325%2C%22first_name%22%3A%22%D0%94%D0%B8%D0%BC%D0%B0%22%2C%22last_name%22%3A%22%22%2C%22username%22%3A%22otcseller132%22%2C%22language_code%22%3A%22ru%22%2C%22allows_write_to_pm%22%3Atrue%2C%22photo_url%22%3A%22https%3A%5C%2F%5C%2Ft.me%5C%2Fi%5C%2Fuserpic%5C%2F320%5C%2Fi_6TgYWBnuSgDGilK8pmZuIUf-kC7SV2VP9GETs7WwU.svg%22%7D&chat_instance=8370872738174365064&chat_type=sender&auth_date=1751722177&signature=duBioXksZJiZTCpo8piGJBK-EnxXMLqrFen58V3fS7voQWEwiBXM_vq73hLr0NZheuWbjhYi7B4WUR_asIl6BA&hash=5f61305b56acfda600e24c57668110ea80a3ece4a25be79e2189527b3d06f011"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é curl_cffi —Å –∏–º–∏—Ç–∞—Ü–∏–µ–π Chrome
# –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–Ω—É —Å–µ—Å—Å–∏—é –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API, —á—Ç–æ–±—ã –∏–º–∏—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–≤–µ–¥–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞
# –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∫—É–∫–∏ –∏–ª–∏ –¥—Ä—É–≥–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏.
session = curl_cffi.Session(impersonate="chrome131")

def get_floor_price(name, model):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é (floor) —Ü–µ–Ω—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–¥–∞—Ä–∫–∞ (–ø–æ –∏–º–µ–Ω–∏ –∏ –º–æ–¥–µ–ª–∏)
    —Å –ø–æ–º–æ—â—å—é API gifts3.tonnel.network/api/filterStats.
    """
    key = f"{name}_{model}"
    try:
        # –ö–ª—é—á –≤ payload –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å "authData", –∫–∞–∫ –ø–æ–∫–∞–∑–∞–Ω–æ –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞—Ö
        payload = {
            "authData": AUTH_DATA # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º AUTH_DATA –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
        }

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST-–∑–∞–ø—Ä–æ—Å —Å –ø–æ–º–æ—â—å—é curl_cffi session
        res = session.post(
            "https://gifts3.tonnel.network/api/filterStats",
            headers={
                "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36 OPR/112.0.0.0",
                "Accept": "*/*",
                "Accept-Language": "en-US,en;q=0.5",
                "Referer": "https://market.tonnel.network/",
                "Content-Type": "application/json", # –í–∞–∂–Ω–æ: —É–∫–∞–∑—ã–≤–∞–µ–º JSON —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                "Origin": "https://market.tonnel.network",
                "Connection": "keep-alive",
                "Sec-Fetch-Dest": "empty",
                "Sec-Fetch-Mode": "cors",
                "Sec-Fetch-Site": "cross-site",
                "Sec-GPC": "1",
                "Priority": "u=4",
            },
            json=payload, # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ JSON
            timeout=10, # –¢–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
            verify=False # –í–ù–ò–ú–ê–ù–ò–ï: –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ!
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–¥ HTTP –æ—Ç–≤–µ—Ç–∞
        if res.status_code != 200:
            logger.error("[ERROR] floorPrice: HTTP %s - %s", res.status_code, res.text)
            return None

        # –ü—Ä–æ–±—É–µ–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –∫–∞–∫ JSON
        try:
            data = res.json()
        except json.JSONDecodeError:
            logger.warning("[WARN] floorPrice: –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞:\n%s", res.text[:500])
            return None

        # –û–∂–∏–¥–∞–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –±—É–¥–µ—Ç —Å–ª–æ–≤–∞—Ä–µ–º —Å –∫–ª—é—á–æ–º 'data',
        # –∏ –≤–Ω—É—Ç—Ä–∏ –Ω–µ–≥–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–ª—é—á–∞–º –≤–∏–¥–∞ "–ò–º—è–ü–æ–¥–∞—Ä–∫–∞_–ú–æ–¥–µ–ª—å–ü–æ–¥–∞—Ä–∫–∞"
        # –ü—Ä–∏–º–µ—Ä –æ–∂–∏–¥–∞–µ–º–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {"data": {"GiftName_ModelName": {"floorPrice": 123.45, ...}}}
        floor_data = data.get("data", {})
        return floor_data.get(key, {}).get("floorPrice")

    except Exception as e:
        logger.error("[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ floor price –¥–ª—è %s_%s: %s", name, model, e)
        return None

async def check_auctions(app):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤.
    –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ.
    """
    while True:
        # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–æ—Ç–∞
        for user_id, settings in user_settings.items():
            if not settings['active']: # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –±–æ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω
                continue

            try:
                # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–µ–∑–Ω—É—é –Ω–∞–≥—Ä—É–∑–∫—É –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ API pageGifts
                payload = {
                    "page": 1,
                    "limit": 30, # –ü–æ–ª—É—á–∞–µ–º 30 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤
                    "sort": '{"auctionEndTime":1,"gift_id":-1}', # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞—É–∫—Ü–∏–æ–Ω–∞
                    "filter": '{"auction_id":{"$exists":true},"status":"active","asset":"TON"}', # –§–∏–ª—å—Ç—Ä –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö TON-–∞—É–∫—Ü–∏–æ–Ω–æ–≤
                    "price_range": None, # –û—Å—Ç–∞–≤–ª—è–µ–º None, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∞—É–∫—Ü–∏–æ–Ω—ã, –∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ —Ü–µ–Ω–µ –ø–æ–∑–∂–µ
                    "ref": 0,
                    "user_auth": AUTH_DATA # –ò—Å–ø–æ–ª—å–∑—É–µ–º AUTH_DATA –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
                }

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST-–∑–∞–ø—Ä–æ—Å —Å –ø–æ–º–æ—â—å—é curl_cffi session
                res = session.post(
                    "https://gifts3.tonnel.network/api/pageGifts",
                    headers={
                        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36 OPR/112.0.0.0",
                        "Accept": "*/*",
                        "Accept-Language": "en-US,en;q=0.5",
                        "Referer": "https://market.tonnel.network/",
                        "Content-Type": "application/json",
                        "Origin": "https://market.tonnel.network",
                        "Connection": "keep-alive",
                        "Sec-Fetch-Dest": "empty",
                        "Sec-Fetch-Mode": "cors",
                        "Sec-Fetch-Site": "cross-site",
                        "Sec-GPC": "1",
                        "Priority": "u=4",
                    },
                    json=payload,
                    timeout=10,
                    verify=False # –í–ù–ò–ú–ê–ù–ò–ï: –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ!
                )

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–¥ HTTP –æ—Ç–≤–µ—Ç–∞
                if res.status_code != 200:
                    logger.error("[ERROR] check_auctions: HTTP %s - %s", res.status_code, res.text)
                    continue # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–ª–∏ –∏—Ç–µ—Ä–∞—Ü–∏–∏, –µ—Å–ª–∏ –æ—à–∏–±–∫–∞

                # –ü—Ä–æ–±—É–µ–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –∫–∞–∫ JSON
                try:
                    data = res.json()
                except json.JSONDecodeError:
                    logger.warning("[WARN] check_auctions: –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞:\n%s", res.text[:500])
                    continue

                # API pageGifts –º–æ–∂–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–∞–ø—Ä—è–º—É—é –∏–ª–∏ —Å–ª–æ–≤–∞—Ä—å —Å –∫–ª—é—á–æ–º 'auctions'
                auctions = data if isinstance(data, list) else data.get('auctions', [])
                logger.info("\U0001F50D –ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤: %d", len(auctions))

                # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∞—É–∫—Ü–∏–æ–Ω—ã
                for gift in auctions:
                    gift_id = gift.get('gift_id')
                    if gift_id is None:
                        logger.warning("–û–±—ä–µ–∫—Ç –ø–æ–¥–∞—Ä–∫–∞ –±–µ–∑ gift_id: %s", gift)
                        continue # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –ø–æ–¥–∞—Ä–∫–∞

                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–¥–∞—Ä–∫–∏, –æ –∫–æ—Ç–æ—Ä—ã—Ö —É–∂–µ –±—ã–ª–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–æ
                    if gift_id in settings['notified_ids']:
                        continue

                    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–¥–∞—Ä–∫–µ
                    name = gift.get('name', 'N/A')
                    model = gift.get('model', 'N/A')
                    backdrop = gift.get('backdrop', 'N/A') # –§–æ–Ω
                    auction_data = gift.get('auction', {})
                    bid_history = auction_data.get('bidHistory', [])
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞–≤–∫—É (–ø–æ—Å–ª–µ–¥–Ω—é—é –≤ –∏—Å—Ç–æ—Ä–∏–∏ –∏–ª–∏ —Å—Ç–∞—Ä—Ç–æ–≤—É—é)
                    bid = float(bid_history[-1]['amount']) if bid_history else float(auction_data.get('startingBid', 0))
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞—É–∫—Ü–∏–æ–Ω–∞
                    end_time_raw = auction_data.get('auctionEndTime', '')
                    end_time = end_time_raw[:19].replace('T',' ') if end_time_raw else 'N/A'
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º gift_id –≤ –∫–∞—á–µ—Å—Ç–≤–µ gift_num, –µ—Å–ª–∏ gift_num –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
                    gift_num = gift.get('gift_num', gift.get('gift_id', 'N/A')) 

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞ –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ —Ü–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    if not (settings['price_range'][0] <= bid <= settings['price_range'][1]):
                        logger.debug("–ê—É–∫—Ü–∏–æ–Ω %s (—Å—Ç–∞–≤–∫–∞ %.2f) –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Ü–µ–Ω %s –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s", 
                                     gift_id, bid, settings['price_range'], user_id)
                        continue

                    # –ü–æ–ª—É—á–∞–µ–º "floor price" (–º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É) –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏
                    min_price = get_floor_price(name, model)
                    if min_price is None:
                        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å floor price –¥–ª—è %s_%s. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–¥–∞—Ä–æ–∫ %s.", name, model, gift_id)
                        continue

                    # –†–∞—Å—á–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏
                    total_cost = bid * 1.1 # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è –∫–æ–º–∏—Å—Å–∏—è 10% –∏–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã
                    profit = min_price - total_cost
                    percent = (profit / total_cost) * 100 if total_cost > 0 else -100 # –ò–∑–±–µ–≥–∞–µ–º –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–±—ã–ª–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º—É, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
                    if percent < settings['min_profit']:
                        logger.debug("–ê—É–∫—Ü–∏–æ–Ω %s (–ø—Ä–∏–±—ã–ª—å %.1f%%) –Ω–∏–∂–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏ %d%% –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s", 
                                     gift_id, percent, settings['min_profit'], user_id)
                        continue

                    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ–¥–∞—Ä–æ–∫ –≤ Telegram (–¥–ª—è –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è)
                    # –¢–µ–ø–µ—Ä—å —ç—Ç–æ –±—É–¥–µ—Ç –æ–±—ã—á–Ω–∞—è URL-—Å—Ç—Ä–æ–∫–∞, –±–µ–∑ Markdown-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    gift_link = f"https://t.me/tonnel_network_bot/gift?startapp={gift_num}" if gift_num != 'N/A' else '–°—Å—ã–ª–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'

                    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Telegram –≤ —Ñ–æ—Ä–º–∞—Ç–µ –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (–±–µ–∑ MarkdownV2)
                    message = (
                        f"üéÅ–ù–∞–∑–≤–∞–Ω–∏–µ: {name}\n" 
                        f"–ú–æ–¥–µ–ª—å: {model}\n"
                        f"–§–æ–Ω: {backdrop}\n"
                        f"‚è≥–ó–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è: {end_time}\n" 
                        f"üí∞–°—Ç–∞–≤–∫–∞: {bid:.2f} TON\n" 
                        f"Tonnel Floor: {min_price:.2f} TON\n" 
                        f"üíµ–ü—Ä–∏–±—ã–ª—å: +{percent:.1f}% ({profit:.2f} TON)\n" 
                        f"üîó–ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞: {gift_link}" # –ü—Ä–æ—Å—Ç–æ –≤—Å—Ç–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –∫–∞–∫ —Ç–µ–∫—Å—Ç
                    )
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è parse_mode
                    # –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ä–µ–∂–∏–º "Plain Text"
                    await app.bot.send_message(chat_id=user_id, text=message) # –ò–ó–ú–ï–ù–ï–ù–û: parse_mode —É–¥–∞–ª–µ–Ω
                    logger.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–¥–∞—Ä–∫–µ %s (–ø—Ä–∏–±—ã–ª—å %.1f%%) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s", gift_id, percent, user_id)
                    # –î–æ–±–∞–≤–ª—è–µ–º ID –ø–æ–¥–∞—Ä–∫–∞ –≤ —Å–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–Ω—ã—Ö, —á—Ç–æ–±—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ
                    settings['notified_ids'].add(gift_id)

            except Exception as e:
                logger.error("[ERROR] –û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ check_auctions –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: %s", user_id, e)

        # –ñ–¥–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        await asyncio.sleep(settings.get('interval', DEFAULT_INTERVAL)) 

# --- –ö–æ–º–∞–Ω–¥—ã Telegram ---

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start. –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user_id = update.effective_user.id
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    if user_id not in user_settings:
        user_settings[user_id] = {
            'min_profit': DEFAULT_MIN_PROFIT,
            'interval': DEFAULT_INTERVAL,
            'price_range': (5, 25),
            'active': False,
            'notified_ids': set()
        }
    user_settings[user_id]['active'] = True
    # –ò–ó–ú–ï–ù–ï–ù–û: –°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ MarkdownV2
    await update.message.reply_text("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ü–æ–∏—Å–∫ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫...")
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s", user_id)

async def stop_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stop. –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—á–∏—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–Ω—ã—Ö ID.
    """
    user_id = update.effective_user.id
    if user_id in user_settings:
        user_settings[user_id]['active'] = False
        user_settings[user_id]['notified_ids'].clear() # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–Ω—ã—Ö ID –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
    # –ò–ó–ú–ï–ù–ï–ù–û: –°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ MarkdownV2
    await update.message.reply_text("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
    logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s", user_id)

async def settings_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /settings. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user_id = update.effective_user.id
    current_settings = user_settings.get(user_id, {
        'min_profit': DEFAULT_MIN_PROFIT,
        'interval': DEFAULT_INTERVAL,
        'price_range': (5, 25),
        'active': False
    })
    status = "–∞–∫—Ç–∏–≤–µ–Ω" if current_settings['active'] else "–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    message = (
        f"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
        f"–°—Ç–∞—Ç—É—Å: {status}\n"
        f"–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {current_settings['interval']} —Å–µ–∫—É–Ω–¥\n"
        f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: {current_settings['min_profit']}%\n"
        f"–î–∏–∞–ø–∞–∑–æ–Ω —Å—Ç–∞–≤–æ–∫: –æ—Ç {current_settings['price_range'][0]} –¥–æ {current_settings['price_range'][1]} TON\n\n"
        f"–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
        f"/setprofit <–ø—Ä–æ—Ü–µ–Ω—Ç>\n"
        f"/setinterval <—Å–µ–∫—É–Ω–¥—ã>\n"
        f"/setpricerange <–º–∏–Ω_—Ç–æ–Ω> <–º–∞–∫—Å_—Ç–æ–Ω>"
    )
    # –ò–ó–ú–ï–ù–ï–ù–û: parse_mode —É–¥–∞–ª–µ–Ω
    await update.message.reply_text(message)
    logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–ø—Ä–æ—à–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º %s", user_id)

async def set_profit_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /setprofit. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–±—ã–ª–∏.
    """
    user_id = update.effective_user.id
    if not context.args or not context.args[0].isdigit():
        # –ò–ó–ú–ï–ù–ï–ù–û: –°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ MarkdownV2
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–±—ã–ª–∏. –ü—Ä–∏–º–µ—Ä: /setprofit 7")
        return
    try:
        profit = int(context.args[0])
        if profit < 0:
            await update.message.reply_text("–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–±—ã–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º.")
            return
        user_settings[user_id]['min_profit'] = profit
        await update.message.reply_text(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {profit}%.")
        logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s —É—Å—Ç–∞–Ω–æ–≤–∏–ª –º–∏–Ω. –ø—Ä–∏–±—ã–ª—å: %d%%", user_id, profit)
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")

async def set_interval_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /setinterval. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É–∫—Ü–∏–æ–Ω–æ–≤.
    """
    user_id = update.effective_user.id
    if not context.args or not context.args[0].isdigit():
        # –ò–ó–ú–ï–ù–ï–ù–û: –°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ MarkdownV2
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ —Å–µ–∫—É–Ω–¥–∞—Ö. –ü—Ä–∏–º–µ—Ä: /setinterval 60")
        return
    try:
        interval = int(context.args[0])
        if interval < 5: # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å API
            await update.message.reply_text("–ò–Ω—Ç–µ—Ä–≤–∞–ª –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 5 —Å–µ–∫—É–Ω–¥.")
            return
        user_settings[user_id]['interval'] = interval
        await update.message.reply_text(f"–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {interval} —Å–µ–∫—É–Ω–¥.")
        logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s —É—Å—Ç–∞–Ω–æ–≤–∏–ª –∏–Ω—Ç–µ—Ä–≤–∞–ª: %d —Å–µ–∫.", user_id, interval)
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")

async def set_price_range_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /setpricerange. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω –¥–ª—è —Å—Ç–∞–≤–æ–∫.
    """
    user_id = update.effective_user.id
    if len(context.args) != 2 or not all(arg.replace('.', '', 1).isdigit() for arg in context.args):
        # –ò–ó–ú–ï–ù–ï–ù–û: –°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ MarkdownV2
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É. –ü—Ä–∏–º–µ—Ä: /setpricerange 10 50")
        return
    try:
        min_price = float(context.args[0])
        max_price = float(context.args[1])
        if min_price < 0 or max_price < min_price:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω. –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å >= 0, –∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è >= –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π.")
            return
        user_settings[user_id]['price_range'] = (min_price, max_price)
        await update.message.reply_text(f"–î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ –æ—Ç {min_price} –¥–æ {max_price} TON.")
        logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s —É—Å—Ç–∞–Ω–æ–≤–∏–ª –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω: %.2f-%.2f TON", user_id, min_price, max_price)
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞.")


async def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∑–∞–ø—É—Å–∫–∞—é—â–∞—è Telegram-–±–æ—Ç–∞.
    """
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram-–±–æ—Ç–∞ —Å –ø–æ–º–æ—â—å—é —Ç–æ–∫–µ–Ω–∞
    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(CommandHandler("stop", stop_command))
    app.add_handler(CommandHandler("settings", settings_command))
    app.add_handler(CommandHandler("setprofit", set_profit_command))
    app.add_handler(CommandHandler("setinterval", set_interval_command))
    app.add_handler(CommandHandler("setpricerange", set_price_range_command))

    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É–∫—Ü–∏–æ–Ω–æ–≤.
    # –û–Ω–∞ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞.
    asyncio.create_task(check_auctions(app))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã...")
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ä–æ—Å –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram
    await app.run_polling()

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    asyncio.run(main())